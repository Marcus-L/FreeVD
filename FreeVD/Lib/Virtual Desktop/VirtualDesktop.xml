<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VirtualDesktop</name>
    </assembly>
    <members>
        <member name="M:WindowsDesktop.Interop.ComInterfaceAttributeExtensions.GetComInterfaceNameIfWrapper(System.Type)">
            <summary>
            Gets COM interface name if specific type has '<see cref="T:WindowsDesktop.Interop.ComInterfaceAttribute"/>' attribute.
            </summary>
        </member>
        <member name="P:WindowsDesktop.Properties.VirtualDesktopCompilerConfiguration.SaveCompiledAssembly">
            <summary>
            Gets or sets a value indicating whether the compiled assembly should be saved or not.
            </summary>
            <remarks>
            This library uses the non-public Windows API.<br/>
            Since the ID of the COM Interface may differ depending on the build of Windows, it works by checking the ID in that environment at runtime and generating the assembly.<br/>
            <br/>
            Here you can set whether to save the assembly.<br/>
            Saving will improve the speed of the next launch.
            </remarks>
            <returns>
            A value indicating whether the compiled assembly should be saved or not. Default is <see langword="true" />.
            </returns>
        </member>
        <member name="P:WindowsDesktop.Properties.VirtualDesktopCompilerConfiguration.CompiledAssemblySaveDirectory">
            <summary>
            Gets or sets a value indicating the directory where the assembly will be saved.
            </summary>
            <remarks>
            See <see cref="P:WindowsDesktop.Properties.VirtualDesktopCompilerConfiguration.SaveCompiledAssembly"/> property for details.
            </remarks>
            <returns>
            A value indicating whether the compiled assembly should be saved or not. Default is %LocalAppData%.
            </returns>
        </member>
        <member name="T:WindowsDesktop.VirtualDesktop">
            <summary>
            Encapsulates Windows 11 (and Windows 10) virtual desktops.
            </summary>
        </member>
        <member name="P:WindowsDesktop.VirtualDesktop.Id">
            <summary>
            Gets the unique identifier for this virtual desktop.
            </summary>
        </member>
        <member name="P:WindowsDesktop.VirtualDesktop.Name">
            <summary>
            Gets or sets the name of this virtual desktop.
            </summary>
            <remarks>
            This is not supported on Windows 10.
            </remarks>
        </member>
        <member name="P:WindowsDesktop.VirtualDesktop.WallpaperPath">
            <summary>
            Gets or sets the path of the desktop wallpaper.
            </summary>
            <remarks>
            This is not supported on Windows 10.
            </remarks>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.Switch">
            <summary>
            Switches to this virtual desktop.
            </summary>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.Remove">
            <summary>
            Removes this virtual desktop and switches to an available one.
            </summary>
            <remarks>If this is the last virtual desktop, a new one will be created to switch to.</remarks>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.Remove(WindowsDesktop.VirtualDesktop)">
            <summary>
            Removes this virtual desktop and switches to <paramref name="fallbackDesktop" />.
            </summary>
            <param name="fallbackDesktop">A virtual desktop to be displayed after the virtual desktop is removed.</param>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.GetLeft">
            <summary>
            Returns the adjacent virtual desktop on the left, or null if there isn't one.
            </summary>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.GetRight">
            <summary>
            Returns the adjacent virtual desktop on the right, or null if there isn't one.
            </summary>
        </member>
        <member name="P:WindowsDesktop.VirtualDesktop.Current">
            <summary>
            Gets the virtual desktop that is currently displayed.
            </summary>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.GetDesktops">
            <summary>
            Returns an array of available virtual desktops.
            </summary>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.Create">
            <summary>
            Returns a new virtual desktop.
            </summary>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.FromId(System.Guid)">
            <summary>
            Returns a virtual desktop matching the specified identifier.
            </summary>
            <param name="desktopId">The identifier of the virtual desktop to return.</param>
            <remarks>Returns <see langword="null" /> if the identifier is not associated with any available desktops.</remarks>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.FromHwnd(System.IntPtr)">
            <summary>
            Returns the virtual desktop the window is located on.
            </summary>
            <param name="hWnd">The handle of the window.</param>
            <remarks>Returns <see langword="null" /> if the handle is not associated with any open windows.</remarks>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.IsPinnedWindow(System.IntPtr)">
            <summary>
            Determines whether the specified window is pinned.
            </summary>
            <param name="hWnd">The handle of the window.</param>
            <returns><see langword="true" /> if pinned, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.PinWindow(System.IntPtr)">
            <summary>
            Pins the specified window, showing it on all virtual desktops.
            </summary>
            <param name="hWnd">The handle of the window.</param>
            <returns><see langword="true" /> if already pinned or successfully pinned, <see langword="false" /> otherwise (most of the time, the target window is not found or not ready).</returns>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.UnpinWindow(System.IntPtr)">
            <summary>
            Unpins the specified window.
            </summary>
            <param name="hWnd">The handle of the window.</param>
            <returns><see langword="true" /> if already unpinned or successfully unpinned, <see langword="false" /> otherwise (most of the time, the target window is not found or not ready).</returns>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.IsPinnedApplication(System.String)">
            <summary>
            Determines whether the specified app is pinned.
            </summary>
            <param name="appUserModelId">App User Model ID. <see cref="M:WindowsDesktop.VirtualDesktop.TryGetAppUserModelId(System.IntPtr,System.String@)"/> method may be helpful.</param>
            <returns><see langword="true" /> if pinned, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.PinApplication(System.String)">
            <summary>
            Pins the specified app, showing it on all virtual desktops.
            </summary>
            <param name="appUserModelId">App User Model ID. <see cref="M:WindowsDesktop.VirtualDesktop.TryGetAppUserModelId(System.IntPtr,System.String@)"/> method may be helpful.</param>
            <returns><see langword="true" /> if already pinned or successfully pinned, <see langword="false" /> otherwise (most of the time, app id is incorrect).</returns>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.UnpinApplication(System.String)">
            <summary>
            Unpins the specified app.
            </summary>
            <param name="appUserModelId">App User Model ID. <see cref="M:WindowsDesktop.VirtualDesktop.TryGetAppUserModelId(System.IntPtr,System.String@)"/> method may be helpful.</param>
            <returns><see langword="true" /> if already unpinned or successfully unpinned, <see langword="false" /> otherwise (most of the time, app id is incorrect).</returns>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.UpdateWallpaperForAllDesktops(System.String)">
            <summary>
            Apply the specified wallpaper to all desktops.
            </summary>
            <remarks>
            This is not supported on Windows 10.
            </remarks>
            <param name="path">Wallpaper image path.</param>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.MoveToDesktop(System.IntPtr,WindowsDesktop.VirtualDesktop)">
            <summary>
            Moves a window to the specified virtual desktop.
            </summary>
            <param name="hWnd">The handle of the window to be moved.</param>
            <param name="virtualDesktop">The virtual desktop to move the window to.</param>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.IsCurrentVirtualDesktop(System.IntPtr)">
            <summary>
            Determines whether this window is on the current virtual desktop.
            </summary>
            <param name="hWnd">The handle of the window.</param>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.TryGetAppUserModelId(System.IntPtr,System.String@)">
            <summary>
            Try gets the App User Model ID with the specified foreground window.
            </summary>
            <param name="hWnd">The handle of the window.</param>
            <param name="appUserModelId">App User Model ID.</param>
            <returns><see langword="true" /> if the App User Model ID is available, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="E:WindowsDesktop.VirtualDesktop.Created">
            <summary>
            Occurs when a virtual desktop is created.
            </summary>
            <remarks>
            See <see cref="E:WindowsDesktop.VirtualDesktop.CurrentChanged"/> for details.
            </remarks>
        </member>
        <member name="E:WindowsDesktop.VirtualDesktop.Destroyed">
            <summary>
            Occurs when a virtual desktop is destroyed.
            </summary>
            <remarks>
            See <see cref="E:WindowsDesktop.VirtualDesktop.CurrentChanged"/> for details.
            </remarks>
        </member>
        <member name="E:WindowsDesktop.VirtualDesktop.CurrentChanged">
            <summary>
            Occurs when the current virtual desktop is changed.
            </summary>
            <remarks>
            The internal initialization is triggered by the call of a static property/method.<br/>
            Therefore, events are not fired just by subscribing to them.<br/>
            <br/>
            If you want to use only event subscription, the following code is recommended.<br/>
            <code>
            VirtualDesktop.Configuration();
            </code>
            </remarks>
        </member>
        <member name="E:WindowsDesktop.VirtualDesktop.Moved">
            <summary>
            Occurs when the virtual desktop is moved.
            </summary>
            <remarks>
            See <see cref="E:WindowsDesktop.VirtualDesktop.CurrentChanged"/> for details.
            </remarks>
        </member>
        <member name="E:WindowsDesktop.VirtualDesktop.Renamed">
            <summary>
            Occurs when a virtual desktop is renamed.
            </summary>
            <remarks>
            See <see cref="E:WindowsDesktop.VirtualDesktop.CurrentChanged"/> for details.
            </remarks>
        </member>
        <member name="E:WindowsDesktop.VirtualDesktop.WallpaperChanged">
            <summary>
            Occurs when a virtual desktop wallpaper is changed.
            </summary>
            <remarks>
            See <see cref="E:WindowsDesktop.VirtualDesktop.CurrentChanged"/> for details.
            </remarks>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.RegisterViewChanged(System.IntPtr,System.Action{System.IntPtr})">
            <summary>
            Register a listener to receive changes in the application view.
            </summary>
            <param name="targetHwnd">The target window handle to receive events from. If specify <see cref="F:System.IntPtr.Zero"/>, all changes will be delivered.</param>
            <param name="action">Action to be performed.</param>
            <returns><see cref="T:System.IDisposable"/> instance for unsubscribing.</returns>
        </member>
        <member name="P:WindowsDesktop.VirtualDesktop.IsSupported">
            <summary>
            Gets a value indicating virtual desktops are supported by the host.
            </summary>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.Configure">
            <summary>
            Initialize using the default settings. This method should always be called first.
            </summary>
        </member>
        <member name="M:WindowsDesktop.VirtualDesktop.Configure(WindowsDesktop.Properties.VirtualDesktopConfiguration)">
            <summary>
            Sets the behavior for compiling the assembly. This method should always be called first.
            </summary>
        </member>
        <member name="T:WindowsDesktop.VirtualDesktopRenamedEventArgs">
            <summary>
            Provides data for the <see cref="E:WindowsDesktop.VirtualDesktop.Renamed" /> event.
            </summary>
        </member>
        <member name="T:WindowsDesktop.VirtualDesktopWallpaperChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:WindowsDesktop.VirtualDesktop.WallpaperChanged" /> event.
            </summary>
        </member>
        <member name="T:WindowsDesktop.VirtualDesktopChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:WindowsDesktop.VirtualDesktop.CurrentChanged" /> event.
            </summary>
        </member>
        <member name="T:WindowsDesktop.VirtualDesktopMovedEventArgs">
            <summary>
            Provides data for the <see cref="E:WindowsDesktop.VirtualDesktop.CurrentChanged" /> event.
            </summary>
        </member>
        <member name="T:WindowsDesktop.VirtualDesktopDestroyEventArgs">
            <summary>
            Provides data for the <see cref="E:WindowsDesktop.VirtualDesktop.DestroyBegin" />, <see cref="E:WindowsDesktop.VirtualDesktop.DestroyFailed" />, and <see cref="E:WindowsDesktop.VirtualDesktop.Destroyed" /> events.
            </summary>
        </member>
        <member name="P:WindowsDesktop.VirtualDesktopDestroyEventArgs.Destroyed">
            <summary>
            Gets the virtual desktop that was destroyed.
            </summary>
        </member>
        <member name="P:WindowsDesktop.VirtualDesktopDestroyEventArgs.Fallback">
            <summary>
            Gets the virtual desktop to be displayed after <see cref="P:WindowsDesktop.VirtualDesktopDestroyEventArgs.Destroyed" /> is destroyed.
            </summary>
        </member>
    </members>
</doc>
